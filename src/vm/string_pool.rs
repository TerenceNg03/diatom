use std::ops::Index;

/// Token generated by StringPool
pub struct StringId {
    id: usize,
}

/// Immutable String Pool without Interning
///
/// This pool is reference counted to avoid redundant duplicating.
#[derive(Default)]
pub struct StringPool {
    pool: Vec<(String, usize, bool)>,
    free: Vec<usize>,
}

impl StringPool {
    pub fn new() -> Self {
        Self::default()
    }

    #[must_use]
    pub fn add(&mut self, s: String) -> StringId {
        let new = (s, 1, false);
        if self.free.is_empty() {
            self.pool.push(new);
            StringId {
                id: self.pool.len() - 1,
            }
        } else {
            let id = self.free.pop().unwrap();
            self.pool[id] = new;
            StringId { id }
        }
    }

    #[must_use]
    pub fn clone_str(&mut self, StringId { id }: &StringId) -> StringId {
        self.pool[*id].1 += 1;
        StringId { id: *id }
    }

    #[must_use]
    pub fn modify_str<F>(&mut self, StringId { id }: StringId, f: F) -> StringId
    where
        F: FnOnce(&mut String),
    {
        if self.pool[id].1 == 1 {
            f(&mut self.pool[id].0);
            StringId { id }
        } else {
            let mut s = self.pool[id].0.clone();
            f(&mut s);
            self.add(s)
        }
    }

    pub fn delete(&mut self, StringId { id }: StringId) {
        self.pool[id].1 -= 1;
        if self.pool[id].1 == 0 {
            self.free.push(id)
        }
    }
}

impl Index<&StringId> for StringPool {
    type Output = String;
    fn index(&self, StringId { id }: &StringId) -> &Self::Output {
        &self.pool[*id].0
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test() {
        let mut sp = StringPool::default();
        let id1 = sp.add("abcd".to_string());
        sp.clone_str(&id1);
        assert_eq!(sp.pool.len(), 1);
        let id1 = sp.modify_str(id1, |x| x.push_str("efgh"));
        assert_eq!(sp.pool.len(), 2);
        assert_eq!(sp[&id1], "abcdefgh");
        let id2 = sp.add("1234".to_string());
        let id2 = sp.modify_str(id2, |x| x.push_str("5678"));
        assert_eq!(sp.pool.len(), 3);
        sp.clone_str(&id1);
        sp.delete(id1);
        assert_eq!(sp.free.len(), 0);
        sp.delete(id2);
        assert_eq!(sp.free.len(), 1);
    }
}
