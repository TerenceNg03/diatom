// Ignored
WHITESPACE = _{ " " | "\t" }
COMMENT = _{ "--." ~ (!NEWLINE ~ ANY)* }
SHEBANG = _{ "#!" ~ (!NEWLINE ~ ANY)* }

main = { SOI ~ SHEBANG? ~ expr ~ EOI }

// keywords
key_true  = { "true" }
key_false = { "false" }
key_do = { "do" }
key_end = { "end" }
key_if = { "if" }
key_then = { "then" }
key_else = { "else" }
key_case = { "case" }
key_in = { "in" }
key_for = { "for" }
key_nil = { "nil" }
key_assert = { "assert" }
key_return = { "return" }
key_break = { "break" }
key_continue = { "continue" }

//built-in methods
fn_chain = {
    //// nil related
    "then"
    | "and_then"
    | "or_else"

    //// iterator
    | "map"
    | "zip"
    | "flat"
    | "enumerate"
    | "rev"
    | "once"
    | "take"
    | "collect"
    | "max"
    | "min"
    | "sort"
    | "filter"
    | "count"
}

// op - arithmetic
op_plus = { "+" }
op_minus = { "-" }
op_exp = { "**" }
op_mul = { "*" }
op_div_floor = { "//" }
op_div = { "/" }
op_mod = { "%" }
op_range = { ".." }

// op - logic
op_and = { "and" }
op_or = { "or" }
op_not = { "not" }

// op - compare
op_gt = { ">" }
op_ge = { ">=" }
op_eq = { "==" }
op_ne = { "<>" }
op_lt = { "<" }
op_le = { "<=" }

// op - assign
op_assign = { "=" | "+=" | "-=" | "**=" | "*=" | "//=" | "/="}

// op - other
op_comma = { "," }

// ident
ident = { ( ASCII_ALPHA | "_" ) ~ ( ASCII_ALPHANUMERIC | "_" )* ~ "?"? }

// numeric
int = { num_bin | num_oct | num_hex | num_dec } // DO NOT REORDER!
num_bin = @{ ^"0b" ~ ASCII_BIN_DIGIT ~ ( "_" | ASCII_BIN_DIGIT )* }
num_dec = @{ ASCII_DIGIT ~ ( "_" | ASCII_DIGIT )* }
num_oct = @{ ^"0o" ~ ASCII_OCT_DIGIT ~ ( "_" | ASCII_OCT_DIGIT )* }
num_hex = @{ ^"0x" ~ ASCII_HEX_DIGIT ~ ( "_" | ASCII_HEX_DIGIT )* }

// float-point
float = @{
    num_dec ~ "." ~ num_dec? ~ float_exp? |
    num_dec ~ float_exp
}

float_exp = _{ ^"e" ~ (op_plus | op_minus)? ~ num_dec }

// strings
string = @{ "'" ~ (raw_string | str_escape)* ~ "'" }
raw_string = _{ (!("\\" | "\'") ~ ANY)+ }
str_predefined = _{ "n" | "r" | "t" | "\\" | "0" | "'" }
str_byte       = _{ "x" ~ ASCII_HEX_DIGIT{2} }
str_unicode    = _{ "u" ~ ASCII_HEX_DIGIT{4} | "U" ~ ASCII_HEX_DIGIT{8} }
str_escape     = _{ "\\" ~ (str_predefined | str_byte | str_unicode) }

// expr
expr_primary = { ident | string | float | int | key_nil | list | set | dict | tuple } // DO NOT REORDER!
list = { "[" ~ "]" | "[" ~ expr ~ ( op_comma ~ expr )* ~ "]" }
dict = { "{" ~ ":" ~ "}" | "{" ~ dict_pair ~ ( op_comma ~ dict_pair )* ~ "}" }
dict_pair = { string ~ ":" ~ expr }
set = { "{" ~ "}" | "{" ~ expr ~ ( op_comma ~ expr )* ~ "}" }
tuple = { "(" ~ expr ~ ")" }

expr = { prefix* ~ expr_primary ~ postfix* ~ (infix ~ prefix* ~ expr_primary ~ postfix* )* }
prefix = { op_minus | op_plus | op_not }
infix = {
    op_plus | op_minus | op_exp | op_mul | op_div_floor | op_div | op_mod | op_range | 
    op_and | op_or | op_gt | op_ge | op_eq | op_ne | op_lt | op_le | 
    op_assign | op_comma
}
postfix = { op_index | op_call | op_member | op_chain | op_condition }

op_index = { "[" ~ expr ~ "]" }
op_call = { "( ~ expr? ~ )" }
op_member = { "." ~ ident }
op_chain = { "->" ~ fn_chain ~ ident? }
op_condition = { key_if ~ expr ~ key_else ~ expr ~ key_end }

// statements


